rules_version = '2';
service cloud.firestore {

  match /databases/{database}/documents {
   function isUniqueUsername(username) {
    // Query the "profiles" collection to check if a document with the same username exists.
    return !exists(/databases/$(database)/documents/profiles, [
      "username",
      "==",
      username
    ]);}
   function isSignedIn() {
        return request.auth != null;
  }
	
 	function getProfile(profileId){
  	return get(/databases/$(database)/documents/profile/$(profileId))	
  }
  function getLibrary(libraryId){
  		return get(/databases/$(database)/documents/library/$(libraryId))
	}
  function isCurrentUser(userId){
  
  			return request.auth.uid==userId
  }
	function getPage(pageId){
		return get(/databases/$(database)/documents/page/$(pageId))
  }

 

  function getBook(bookId){
    			return get(/databases/$(database)/documents/book/$(bookId))
  			}
   function isValidNewContent(){
   			return resource==null && isSignedIn()
   }
   function isCurrentProfileCurrentUser(profileId){
   			return request.auth.uid == get(/databases/$(database)/documents/profile/$(profileId)).data.userId
   }

   
  	match /user/{userId}{
      function newUser(){
        	return resource==null
      }
        allow create: if newUser()
        allow write:if isSignedIn() && request.auth.uid==userId
        allow update: if isCurrentUser(userId)
        allow read: if isCurrentUser(userId)
    }
 //         
match /profile/{profileId}{
  	
    			function isOwner(rsc){
      
      			return isSignedIn() &&(rsc.data.userId==request.auth.uid)   
    			}
    
    			function isValidNewProfile() {
        		return (isSignedIn()&& resource == null) 
        	}
       
       
     		allow read: if true;
        allow update: if isOwner(resource);
        allow create: if isValidNewProfile();
    		allow delete: if isOwner(resource);
      match /profiles/{profileId=**} {
      	allow create: if request.auth != null && isUniqueUsername(request.resource.data.username);
    	}
  match /collection/{collectionId}{
        	allow read: if getProfile(request.path[4]).data.userId == request.auth.uid
        	allow create: if request.auth!=null
          allow update: if getProfile(request.path[4]).data.userId == request.auth.uid
          
        
  }
}
//
match /follow_book/{followBookId}{
  allow read:if true;
  allow create:if request.auth!=null;
  allow delete:if get(/databases/$(database)/documents/profile/$(resource.data.profileId)).data.userId == request.auth.uid;
}
 //       	 
match /follow_library/{followLibraryId}{
    allow read:if true;
    allow create:if request.auth!=null;
    allow delete:if get(/databases/$(database)/documents/profile/$(resource.data.profileId)).data.userId == request.auth.uid;       
}
//
match /follow_profile/{followProfileId}{ 
		allow read:if true;
        allow create:if request.auth!=null;
        allow delete:if get(/databases/$(database)/documents/profile/$(resource.data.followerId)).data.userId == request.auth.uid;    }
//      
match /page/{pageId}{
  
      function isValidNewPage(){
          return resource == null
      }
     
		
        
        //PAGE
      	allow read: if (resource.data.privacy == false) || 
        (getProfile(resource.data.profileId).data.userId == request.auth.uid) 
        || (request.auth.uid in resource.data.readers) 
        || (request.auth.uid in resource.data.commenters) 
        || (request.auth.uid in resource.data.writers) 
        || (request.auth.uid in resource.data.editors);
     
        // allow write:if 
        // getProfile(resource.data.profileId).data.userId == request.auth.uid 
        // 								|| (request.auth!=null && request.resource.data.readers.length> resource.data.readers.length )
        //                 ||(request.auth.uid in resource.data.readers || request.auth.uid in resource.data.editors );
        allow create: if isValidNewPage() && request.auth != null
			 	allow update: if getProfile(resource.data.profileId).data.userId == request.auth.uid 
        								|| (request.auth.uid in resource.data.editors)
                        || (request.auth.uid in resource.data.writers)
			 	allow delete: if getProfile(resource.data.profileId).data.userId == request.auth.uid;
  	
       
}
match /page_comment/{pageCommentId}{
 	
        		allow read: if getPage(resource.data.pageId).data.privacy == false
          || ((get(/databases/$(database)/documents/profile/$(getPage(resource.data.pageId).data.profileId)).data.userId == request.auth.uid)
          || request.auth.uid in getPage(resource.data.pageId).data.commenters
          || request.auth.uid in getPage(resource.data.pageId).data.writers
          || request.auth.uid in getPage(resource.data.pageId).data.editors
          || request.auth.uid in getPage(resource.data.pageId).data.readers);
            allow update: if request.auth!=null && getProfile(resource.data.profileId).data.userId == request.auth.uid;
            allow create: if request.auth!=null && ( 
            getPage(request.resource.data.pageId).userId == request.auth.uid
            || getPage(request.resource.data.pageId).data.commentable == true 
            || request.auth.uid in getPage(request.resource.data.pageId).data.commenters
          	|| request.auth.uid in getPage(request.resource.data.pageId).data.writers
          	|| request.auth.uid in getPage(request.resource.data.pageId).data.editors);
        
           allow delete: if request.auth != null && getProfile(resource.data.profileId).data.userId == request.auth.uid
	   
} 	
match /book/{bookId}{
  	
       
      
        allow read:if resource.data.privacy == false 
        							||getProfile(resource.data.profileId).data.userId == request.auth.uid 
                      ||request.auth.uid in resource.data.readers 
                      ||request.auth.uid in resource.data.commenters 
                      ||request.auth.uid in resource.data.writers 
                      ||request.auth.uid in resource.data.editors  
        allow list: if resource.data.privacy == false 
        							||getProfile(resource.data.profileId).data.userId == request.auth.uid 
                      ||request.auth.uid in resource.data.readers 
                      ||request.auth.uid in resource.data.commenters 
                      ||request.auth.uid in resource.data.writers 
                      ||request.auth.uid in resource.data.editors 
        allow write:if getProfile(resource.data.profileId).data.userId == request.auth.uid 
        								||
                        (request.resource.data.readers.length> resource.data.readers.length 
												||(request.auth!=null && resource.data.writingIsOpen == true  && (request.resource.data.pageIdList.length> resource.data.pageIdList.length))
                        ||((request.auth.uid in get(/databases/$(database)/documents/book/$(request.path[4])).data.writers)&&request.resource.data.pageIdList.length>resource.data.pageIdList.length))
        								||((request.auth.uid in get(/databases/$(database)/documents/book/$(request.path[4])).data.editors));
        allow create: if request.auth!=null;
        allow update: if getProfile(resource.data.profileId).data.userId == request.auth.uid 
        								|| request.auth.uid in resource.data.editors 
                        || ((request.auth.uid in resource.data.writers) && request.resource.data.pageIdList.length>resource.data.pageIdList.length)        
        allow delete: if getProfile(resource.data.profileId).data.userId==request.auth.uid;

    	
} 
        
  	match /library/{libraryId}{
       function getProfile(profileId){
  				return get(/databases/$(database)/documents/profile/$(profileId))
  		}

  			allow read: if resource.data.privacy == false || getProfile(resource.data.profileId).data.userId == request.auth.uid|| request.auth.uid in resource.data.readers || request.auth.uid in resource.data.commenters || request.auth.uid in resource.data.writers || request.auth.uid in resource.data.editors
        allow create: if request.auth != null;
        allow write: if getProfile(resource.data.profileId).data.userId == request.auth.uid 
        								||
                        (request.resource.data.readers.length> resource.data.readers.length 
												|| (request.auth!=null && resource.data.writingIsOpen == true  && (request.resource.data.pageIdList.length> resource.data.pageIdList.length))
                        || (request.auth!=null && resource.data.writingIsOpen == true  && (request.resource.data.bookIdList.length> resource.data.bookIdList.length))
                        ||((request.auth.uid in get(/databases/$(database)/documents/book/$(request.path[4])).data.writers)&&request.resource.data.pageIdList.length>resource.data.pageIdList.length))
        								||((request.auth.uid in get(/databases/$(database)/documents/book/$(request.path[4])).data.editors));
        
	 			allow update: if getProfile(resource.data.profileId).data.userId == request.auth.uid 
        								|| request.auth.uid in resource.data.editors 
                        || ((request.auth.uid in resource.data.writers) && request.resource.data.pageIdList.length>resource.data.pageIdList.length)
                        || ((request.auth.uid in resource.data.writers) && request.resource.data.bookIdList.length>resource.data.bookIdList.length)        
       	allow delete: if getProfile(resource.data.profileId).data.userId == request.auth.uid
    

      
      
  }
	match /notification/{notifcationId}{
	function getProfile(profileId){
	return get(/databases/$(database)/documents/profile/$(profileId))
	}
	function canReadIf(rsc){
	return getProfile(rsc.data.forProfileId).data.userId == request.auth.uid
	}
  
	allow create: if request.auth != null && resource==null
	allow read : if canReadIf(resource)
	allow delete: if canReadIf(resource)
          
	}
  match /user_approval/{user_approvalId}{
			function getProfile(profileId){
					return get(/databases/$(database)/documents/profile/$(profileId))
			}
      
  		function canDeleteIf(rsc){
      		return getProfile(rsc.data.profileId).data.userId == request.auth.uid
      }
  		
      allow read: if request.auth.uid == getProfile(resource.data.profileId).userId
      allow delete: if isSignedIn() && canDeleteIf(resource)
      allow update: if isSignedIn() && canDeleteIf(resource)
      allow create: if isSignedIn()
      
      }
  match /stories/{storyId}{
      allow read: if true
      allow delete: if true
      allow update: if true
      allow create: if true
  }
}
}